if game.PlaceId == 6229116934 then

local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
if not WindUI then
    warn("Failed to load WindUI")
    return
end

local Window = WindUI:CreateWindow({
    Title = "Clouds Hub | BETA", 
    Icon = "cloud", 
    Author = "by @wokmoon", 
    Folder = "CloudHub", 
    Size = UDim2.fromOffset(505, 325),
    KeySystem = {
        Key = {"V2COMINGSOON", "CloudHvb0nTop", "Dimbo&Me"},
        Note = "ðŸ”‘ In Discord", 
        URL = "https://discord.gg/RZCwnvmAmv", 
        SaveKey = false, 
    }, 
    Transparent = true,
    Theme = "Dark", 
    SideBarWidth = 175,
    HasOutline = true, 
})

Window:Divider()

-- General Tab
local Tab1 = Window:Tab({ Title = "Main", Icon = "dribbble" })

Window:Divider()

-- Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local CamlockEnabled = false
local CamlockActive = false
local ArcType = "Realistic Arc"

-- Shooting & Indicator Section
local Section1 = Tab1:Section({ Title = "Accuracy", TextXAlignment = "Left", TextSize = 17 })

-- Dropdown for Shooting Type
local ArcDropdown = Tab1:Dropdown({
    Title = "Shooting Type",
    Desc = "",
    Value = "Realistic Arc",
    Multi = false,
    AllowNone = false,
    Values = {"Realistic Arc", "High Arc", "Middle Arc", "Low Arc" },
    Callback = function(Value)
        ArcType = Value
    end
})

-- Toggle for Camlock
local CamlockToggle = Tab1:Toggle({
    Title = "Enable Arcs",
    Desc = "",
    Value = false,
    Callback = function(state)
        CamlockEnabled = state
    end,
})

-- Function to Check If Player Has Ball
local function HasBall()
    return Player.Character and Player.Character:FindFirstChild("Basketball") ~= nil
end

-- Function to Get Nearest Goal
local function GetGoal()
    local Distance, Goal = math.huge, nil
    local Character = Player.Character
    if not Character or not Character.PrimaryPart then return nil end
    local CharacterPosition = Character.PrimaryPart.Position  

    for _, court in ipairs(Workspace:GetChildren()) do
        for _, Obj in ipairs(court:GetDescendants()) do
            if Obj.Name == "Swish" and Obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                local Magnitude = (CharacterPosition - Obj.Parent.Position).Magnitude
                if Magnitude < Distance then
                    Distance = Magnitude
                    Goal = Obj.Parent
                end
            end
        end
    end

    return Goal, Distance
end

-- Function to Calculate Shooting Arc
local function CalculateArc(distance)
    if ArcType == "High Arc" then
        return math.max(0.019 * (distance ^ 2) - 1.0 * distance + 15, 5)
    elseif ArcType == "Middle Arc" then
        return math.max(0.017 * (distance ^ 2) - 1.2 * distance + 20, 5)
    elseif ArcType == "Low Arc" then
        return math.max(0.015 * (distance ^ 2) - 1.8 * distance + 40, 8)
    elseif ArcType == "Realistic Arc" then
        return math.max(0.015 * (distance ^ 2) - 1.3 * distance + 35, 5)
    end
end

-- Function to Activate Camlock
local function ActivateCamlock()
    if not CamlockEnabled or not HasBall() or CamlockActive then return end
    CamlockActive = true

    local Goal, Distance = GetGoal()
    if Goal then
        local ArcHeight = CalculateArc(math.floor(Distance))
        local BasketPosition = Goal.Position + Vector3.new(0, ArcHeight, 0)

        Camera.CFrame = CFrame.new(Camera.CFrame.Position, BasketPosition + Vector3.new(0, 0.1, 0))
        task.wait(1)
        Camera.CameraType = Enum.CameraType.Custom
    end

    CamlockActive = false
end

-- Detect Jumping to Trigger Camlock
local Humanoid = Player.Character and Player.Character:FindFirstChild("Humanoid")
if Humanoid then
    Humanoid.StateChanged:Connect(function(_, NewState)
        if CamlockEnabled and HasBall() and NewState == Enum.HumanoidStateType.Jumping then
            ActivateCamlock()
        end
    end)
end

-- Indicator GUI
local ScreenGui = nil
local ToggleIndicator = Tab1:Toggle({
    Title = "Indicator",
    Desc = "",
    Value = true,
    Callback = function(state)
        if state then
            ScreenGui = Instance.new("ScreenGui")
            ScreenGui.Parent = Player:WaitForChild("PlayerGui")

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = ScreenGui
            TextLabel.Size = UDim2.new(0.3, 0, 0.05, 0)
            TextLabel.Position = UDim2.new(0.35, 0, 0, 10)
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextScaled = true
            TextLabel.TextColor3 = Color3.new(1, 1, 1)
            TextLabel.Font = Enum.Font.SourceSansBold
            TextLabel.Text = "Indicator Active"

            RunService.RenderStepped:Connect(function()
                local Goal, Distance = GetGoal()
                if Goal then
                    TextLabel.Text = "Accuracy Distance: " .. math.floor(Distance)
                    TextLabel.TextColor3 = Distance <= 72 and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
                else
                    TextLabel.Text = "No Hoop Detected"
                    TextLabel.TextColor3 = Color3.new(1, 1, 1)
                end
            end)
        else
            if ScreenGui then
                ScreenGui:Destroy()
                ScreenGui = nil
            end
        end
    end
})

-- Reach & Mags Section
local Section2 = Tab1:Section({ 
    Title = "Physics",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Toggle3 = Tab1:Toggle({
    Title = "Enable Reach + Mags",
    Desc = "",
    Value = true,
    Callback = function(state)
        print(state)
    end,
})

-- Slider for Reach Distance
local Slider1 = Tab1:Slider({
    Title = "Ball Reach",
    Step = 1,
    Value = {
        Min = 0,
        Max = 10,
        Default = 0,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New MAX_DISTANCE: " .. MAX_DISTANCE)
    end
})

-- Slider for Mags Distance
local Slider2 = Tab1:Slider({
    Title = "Ball Magnet",
    Step = 1,
    Value = {
        Min = 0,
        Max = 15,
        Default = 0,
    },
    Callback = function(value)
        MAX_DISTANCE = value
        print("New MAX_DISTANCE: " .. MAX_DISTANCE)
    end
})

-- Player and Character Setup
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local runService = game:GetService("RunService")

-- Function to simulate touch
local function simulateTouch(part1, part2)
    firetouchinterest(part1, part2, 0)  
    task.wait(0.05)
    firetouchinterest(part1, part2, 1)  
end

-- Finding the Nearest Ball
local function getNearestBall()
    local nearestBall = nil
    local nearestDistance = MAX_DISTANCE  
    local searchScope = workspace:GetPartBoundsInBox(humanoidRootPart.CFrame, Vector3.new(MAX_DISTANCE, MAX_DISTANCE, MAX_DISTANCE))

    for _, object in ipairs(searchScope) do
        if object:IsA("BasePart") and object.Name:lower() == "ball" then
            local distance = (object.Position - humanoidRootPart.Position).Magnitude
            if distance <= nearestDistance then
                nearestDistance = distance
                nearestBall = object
            end
        end
    end
    return nearestBall, nearestDistance
end

-- Heartbeat Function
runService.Heartbeat:Connect(function()
    local ball, distance = getNearestBall()
    if ball then
        simulateTouch(humanoidRootPart, ball)  
        print("Touched nearest ball:", ball.Name, "at distance:", distance)
    end
end)

local Section3 = Tab1:Section({ 
    Title = "Addons",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Slider3 = Tab1:Slider({
    Title = "WalkSpeed",
    Step = 1,
    Value = {
        Min = 0,
        Max = 2,
        Default = 0,
    },
    -- Callback for when the slider value changes
    Callback = function(value)
        speed = value  -- Set the speed to the slider value
    end
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local runService = game:GetService("RunService")
local humanoid = character:WaitForChild("Humanoid")
local speed = Slider3.Value.Default  -- Initial speed is set to the slider's default value

-- Ensure character and HumanoidRootPart are loaded properly
local function getHumanoidRootPart()
    character = player.Character or player.CharacterAdded:Wait()
    return character and character:FindFirstChild("HumanoidRootPart")
end

-- Update speed dynamically when slider changes
Slider3.Callback = function(value)
    speed = value
end

-- Check for movement
runService.RenderStepped:Connect(function(deltaTime)
    local hrp = getHumanoidRootPart()

    if hrp and humanoid then
        -- Check if the player is actively walking
        if humanoid.MoveDirection.Magnitude > 0 then
            hrp.CFrame = hrp.CFrame * CFrame.new(0, 0, -speed * deltaTime)
        end
    end
end)

local Toggle4 = Tab1:Toggle({
    Title = "Auto Shoot (COMING SOON)",
    Desc = "",
    Value = true,
    Callback = function(state)
        print(state)
    end,
})

local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local webhookUrl = "https://discord.com/api/webhooks/1349364461953093756/HrJ3vkvBvksHUlfJGQEPTjdA1aP1myBcVYFTIEVQyTQdsjNDyb1PRo-xXoX6XKnIr--8" -- Replace with your actual webhook URL

local function sendToDiscordEmbed()
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }

    local data = {
        ["username"] = "User Executed Cloud",
        ["avatar_url"] = "https://media.discordapp.net/attachments/1343768434303041619/1349365529567297657/lakituscloud.png?ex=67d2d614&is=67d18494&hm=2e83caa366a64998dc37be86b0a89c880c0cbe52108a065e556fc1183f0ca336&",
        ["embeds"] = {
            {
                ["title"] = "**Cloud Logs**",
                ["description"] = "",
                ["color"] = 16711680, -- Red color (Change for different colors)
                ["fields"] = {
                    {
                        ["name"] = "Username:",
                        ["value"] = "**" .. localPlayer.Name .. "**",
                        ["inline"] = true
                    },
                    {
                        ["name"] = "User ID:",
                        ["value"] = "`" .. localPlayer.UserId .. "`",
                        ["inline"] = true
                    }
                },
                ["thumbnail"] = {
                    ["url"] = "https://media.discordapp.net/attachments/1343768434303041619/1349365622534049923/Untitled135_20250309130720.png?ex=67d2d62a&is=67d184aa&hm=a0f86116edc8d1d0548c12fecbb2b767e14c164ab1ac6bb7bbcbf2039d727aff&"
                },
                ["footer"] = {
                    ["text"] = "Logged at",
                    ["icon_url"] = ""
                },
                ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
            }
        }
    }

    local body = http:JSONEncode(data)

    local success, err = pcall(function()
        request({
            Url = webhookUrl,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)

    if not success then
        warn("Failed to send message to Discord: " .. err)
    end
end

sendToDiscordEmbed()

end
